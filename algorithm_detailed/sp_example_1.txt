Ship-Port algorithm.

Ships and their preferences:
- s1, ['p1', 'p2', 'p3']
- s2, ['p2', 'p3', 'p1']
- s3, ['p1', 'p3', 'p2']

Total days - length of original schedules (m): 4
Number of ships and ports (n): 3

Creating list of preferences for port p1:
day 4:
	- considering ship s1
	- considering ship s2
		- according to original schedule, ship s2 would visit port p1 on day 4.
	List of preferences is updated: ['s2'].
day 3:
	- considering ship s1
	- considering ship s2
	- considering ship s3
day 2:
	- considering ship s1
	- considering ship s2
	- considering ship s3
		- according to original schedule, ship s3 would visit port p1 on day 2.
	List of preferences is updated: ['s2', 's3'].
day 1:
	- considering ship s1
		- according to original schedule, ship s1 would visit port p1 on day 1.
	List of preferences is updated: ['s2', 's3', 's1'].

Creating list of preferences for port p2:
day 4:
	- considering ship s1
	- considering ship s2
	- considering ship s3
		- according to original schedule, ship s3 would visit port p2 on day 4.
	List of preferences is updated: ['s3'].
day 3:
	- considering ship s1
		- according to original schedule, ship s1 would visit port p2 on day 3.
	List of preferences is updated: ['s3', 's1'].
day 2:
	- considering ship s1
	- considering ship s2
	- considering ship s3
day 1:
	- considering ship s1
	- considering ship s2
		- according to original schedule, ship s2 would visit port p2 on day 1.
	List of preferences is updated: ['s3', 's1', 's2'].

Creating list of preferences for port p3:
day 4:
	- considering ship s1
		- according to original schedule, ship s1 would visit port p3 on day 4.
	List of preferences is updated: ['s1'].
day 3:
	- considering ship s1
	- considering ship s2
	- considering ship s3
		- according to original schedule, ship s3 would visit port p3 on day 3.
	List of preferences is updated: ['s1', 's3'].
day 2:
	- considering ship s1
	- considering ship s2
		- according to original schedule, ship s2 would visit port p3 on day 2.
	List of preferences is updated: ['s1', 's3', 's2'].
List of preferences for port p3 is created, no need to check other days.

Ports and their preferences:
- p1, ['s2', 's3', 's1']
- p2, ['s3', 's1', 's2']
- p3, ['s1', 's3', 's2']

Gale-Shapley algorithm.
Out of range index of woman to propose for men: 3

Execution of the while loop:
Iteration number 1:
Randomly chosen free man is s3, his list of preferences: ['p1', 'p3', 'p2'].
Man s3 is proposing woman p1 from index 0:
	This is first proposal to woman p1.
	Adding couple (s3, p1) to a matching.
	Matching after the update: 
	{'s3': 'p1'}.
Free men are: ['s1', 's2'].
	
Iteration number 2:
Randomly chosen free man is s2, his list of preferences: ['p2', 'p3', 'p1'].
Man s2 is proposing woman p2 from index 0:
	This is first proposal to woman p2.
	Adding couple (s2, p2) to a matching.
	Matching after the update: 
	{'s3': 'p1', 's2': 'p2'}.
Free men are: ['s1'].
	
Iteration number 3:
Randomly chosen free man is s1, his list of preferences: ['p1', 'p2', 'p3'].
Man s1 is proposing woman p1 from index 0:
	Woman p1 is in the matching with a fiance s3:
	Woman p1's preferences: ['s2', 's3', 's1'].
	Woman p1 prefers current fiance s3 more than potential fiance s1.
	Matching doesn't change in this iteration.
Free men are: ['s1'].
	
Iteration number 4:
Randomly chosen free man is s1, his list of preferences: ['p1', 'p2', 'p3'].
Man s1 is proposing woman p2 from index 1:
	Woman p2 is in the matching with a fiance s2:
	Woman p2's preferences: ['s3', 's1', 's2'].
	Woman p2 prefers potential fiance s1 more than current fiance s2.
	Current matching: 
	{'s3': 'p1', 's2': 'p2'}.
	Removing couple (s2, p2) from the matching.
	Adding couple (s1, p2) to matching.
	Matching after the update: 
		{'s3': 'p1', 's1': 'p2'}.
	Man s1 is not free anymore.
	Man s2 is free now.
Free men are: ['s2'].
	
Iteration number 5:
Randomly chosen free man is s2, his list of preferences: ['p2', 'p3', 'p1'].
Man s2 is proposing woman p3 from index 1:
	This is first proposal to woman p3.
	Adding couple (s2, p3) to a matching.
	Matching after the update: 
	{'s3': 'p1', 's1': 'p2', 's2': 'p3'}.
There are no free men anymore.
	
The result of Gale-Shapley algorithm is stable matching S: 
{'s3': 'p1', 's1': 'p2', 's2': 'p3'}
Sorted stable matching:
	(s1, p2)
	(s2, p3)
	(s3, p1)
End of Gale-Shapley algorithm.

Creating shortened schedules:
Final destination for ship s3 is port p1; day of arrival: 2.
Final destination for ship s1 is port p2; day of arrival: 3.
Final destination for ship s2 is port p3; day of arrival: 2.

Comparison:
- original schedules:
	ship s1: ['p1', '--', 'p2', 'p3']
	ship s2: ['p2', 'p3', '--', 'p1']
	ship s3: ['--', 'p1', 'p3', 'p2']

- shortened schedules:
	ship s1: ['p1', '--', 'p2']
	ship s2: ['p2', 'p3']
	ship s3: ['--', 'p1']

Process finished with exit code 0

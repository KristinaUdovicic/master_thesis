Ship-Port algorithm.

Ships and their preferences:
- s1, ['p1', 'p2']
- s2, ['p1', 'p2']

Total days - length of original schedules (m): 4
Number of ships and ports (n): 2

Creating list of preferences for port p1:
day 4:
	- considering ship s1
	- considering ship s2
day 3:
	- considering ship s1
	- considering ship s2
day 2:
	- considering ship s1
	- considering ship s2
		- according to original schedule, ship s2 would visit port p1 on day 2.
	List of preferences is updated: ['s2'].
day 1:
	- considering ship s1
		- according to original schedule, ship s1 would visit port p1 on day 1.
	List of preferences is updated: ['s2', 's1'].

Creating list of preferences for port p2:
day 4:
	- considering ship s1
	- considering ship s2
		- according to original schedule, ship s2 would visit port p2 on day 4.
	List of preferences is updated: ['s2'].
day 3:
	- considering ship s1
		- according to original schedule, ship s1 would visit port p2 on day 3.
	List of preferences is updated: ['s2', 's1'].
List of preferences for port p2 is created, no need to check other days.

Ports and their preferences:
- p1, ['s2', 's1']
- p2, ['s2', 's1']

Gale-Shapley algorithm.
Out of range index of woman to propose for men: 2

Execution of the while loop:
Iteration number 1:
Randomly chosen free man is s1, his list of preferences: ['p1', 'p2'].
Man s1 is proposing woman p1 from index 0:
	This is first proposal to woman p1.
	Adding couple (s1, p1) to a matching.
	Matching after the update: 
	{'s1': 'p1'}.
Free men are: ['s2'].
	
Iteration number 2:
Randomly chosen free man is s2, his list of preferences: ['p1', 'p2'].
Man s2 is proposing woman p1 from index 0:
	Woman p1 is in the matching with a fiance s1:
	Woman p1's preferences: ['s2', 's1'].
	Woman p1 prefers potential fiance s2 more than current fiance s1.
	Current matching: 
	{'s1': 'p1'}.
	Removing couple (s1, p1) from the matching.
	Adding couple (s2, p1) to matching.
	Matching after the update: 
		{'s2': 'p1'}.
	Man s2 is not free anymore.
	Man s1 is free now.
Free men are: ['s1'].
	
Iteration number 3:
Randomly chosen free man is s1, his list of preferences: ['p1', 'p2'].
Man s1 is proposing woman p2 from index 1:
	This is first proposal to woman p2.
	Adding couple (s1, p2) to a matching.
	Matching after the update: 
	{'s2': 'p1', 's1': 'p2'}.
There are no free men anymore.
	
The result of Gale-Shapley algorithm is stable matching S: 
{'s2': 'p1', 's1': 'p2'}
Sorted stable matching:
	(s1, p2)
	(s2, p1)
End of Gale-Shapley algorithm.

Creating shortened schedules:
Final destination for ship s2 is port p1; day of arrival: 2.
Final destination for ship s1 is port p2; day of arrival: 3.

Comparison:
- original schedules:
	ship s1: ['p1', '--', 'p2', '--']
	ship s2: ['--', 'p1', '--', 'p2']

- shortened schedules:
	ship s1: ['p1', '--', 'p2']
	ship s2: ['--', 'p1']

Process finished with exit code 0
